note
	description: "Pixel buffer that replaces original image file.%
		%The original version of this class has been generated by Image Eiffel Code."
	author: "Eiffel image embeder"
	date: "Sat, 07 Jan 2017 22:18:47 +0000"
	revision: "1.0"

class
	NEW_PIXEL_BUFFER

inherit
	EV_PIXEL_BUFFER

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			make_with_size (13, 16)
			fill_memory
		end

feature {NONE} -- Image data

	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(EF,79,BA,FE)A(E3,91,C3,FD)A(E3,8E,B8,FD)A(E2,8C,AF,FE)A(E2,89,A4,FE)A(E2,85,98,FE)A(E3,81,8C,FD)A(EF,5F,64,FE)A(81,53,4F,FF)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(E2,94,C4,FD)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F8,F8,F8)A(E8,81,7C,FE)A(D7,6D,8C,FF)A(8B,48,32,FF)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(E2,90,B8,FD)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(E8,7C,72,FE)A(FC,4C,BE,FF)A(D7,25,6B,FF)A(8F,3B,15,FF)A(00,00,00,00)A(00,00,00,00)A(E1,8E,AF,FE)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F8,F8,F9)A(E9,77,66,FD)A(FB,0A,AA,FF)A(FC,1D,90,FC)A(DC,38,4A,F8)A(99,3C,0A,ED)A(01,00,00,FF)A(E1,8A,A3,FE)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F7,F7,F8)A(E9,72,5C,FD)A(FC,22,7E,FD)A(FD,37,68,FA)A(FE,4C,51,F4)A(E2,4E,23,E8)A(97,3B,08,D1)A(E2,87,97,FD)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F7,F8,F9)A(F9,BA,AD,FA)A(F0,97,80,F8)A(F1,92,7E,F0)A(F2,8F,7C,E9)A(F2,8C,7C,E3)A(E7,4E,28,CA)A(E2,84,8C,FE)A(FF,F8,F9,F9)
				A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F4,F7,F9)A(FF,EE,F5,F7)A(FF,E9,F3,F6)A(FF,E4,F3,F7)A(FF,DC,EF,F5)A(E5,62,46,C6)A(E3,80,81,FD)A(FF,F8,F8,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F6,F8,F9)A(FF,F1,F7,F8)A(FF,EB,F5,F7)A(FF,E6,F3,F7)A(FF,E0,F2,F6)A(FF,D8,ED,F5)A(E6,60,46,BC)A(E3,7E,76,FD)A(FF,F7,F8,F8)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F8,F9,F9)A(FF,F2,F7,F8)A(FF,ED,F5,F8)A(FF,E7,F4,F7)A(FF,E2,F2,F6)A(FF,DC,F0,F6)A(FF,D4,EB,F4)A(E7,60,47,B4)A(E4,7A,6C,FD)A(FF,F7,F8,F8)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F4,F7,F8)A(FF,EE,F6,F8)A(FF,E9,F4,F7)A(FF,E3,F3,F7)A(FF,DE,F1,F6)A(FF,D8,EF,F5)A(FF,CF,EA,F5)A(E8,5D,46,A8)A(E4,78,60,FE)A(FF,F6,F7,F8)A(FF,F9,F9,F9)A(FF,F9,F9,F9)A(FF,F5,F8,F9)A(FF,F0,F6,F8)A(FF,EA,F5,F7)A(FF,E5,F3,F7)A(FF,DF,F1,F6)A(FF,DA,F0,F6)A(FF,D4,EE,F5)A(FF,CA,E7,F3)A(E9,5C,47,A0)A(E5,74,57,FD)A(FF,F6,F8,F9)A(FF,F9,F9,F9)A(FF,F6,F8,F9)A(FF,F1,F7,F8)A(FF,EB,F5,F7)A(FF,E6,F3,F7)A(FF,E1,F2,F6)A(FF,DB,F0,F6)A(FF,D6,EF,F5)A(FF,D0,ED,F4)A(FF,C7,E6,F3)A(EA,5A,47,9E)A(E5,72,4D,FD)A(FF,F5,F7,F8)A(FF,F8,F9,F9)A(FF,F2,F7,F8)
				A(FF,ED,F5,F8)A(FF,E7,F4,F7)A(FF,E2,F2,F6)A(FF,DD,F1,F6)A(FF,D7,EF,F5)A(FF,D2,ED,F5)A(FF,CC,EC,F4)A(FF,C2,E4,F2)A(EB,5A,47,9E)A(E6,70,4D,F4)A(FF,F4,F6,F8)A(FF,F4,F7,F8)A(FF,EE,F6,F8)A(FF,E9,F4,F7)A(FF,E3,F3,F7)A(FF,DE,F1,F6)A(FF,D9,EF,F5)A(FF,D3,EE,F5)A(FF,CE,EC,F4)A(FF,C8,EB,F4)A(FF,BD,E3,F1)A(EB,5B,48,9E)A(E7,6E,4C,E9)A(FF,ED,F3,F8)A(FF,EC,F4,F8)A(FF,E6,F2,F6)A(FF,E1,F0,F7)A(FF,DB,ED,F5)A(FF,D6,ED,F5)A(FF,D0,EB,F4)A(FF,CB,E9,F3)A(FF,C6,E8,F3)A(FF,C0,E5,F2)A(FF,B9,DE,F1)A(EC,5B,47,9F)A(EE,45,18,D8)A(E9,68,47,D5)A(EA,65,47,CB)A(EB,63,47,C1)A(EB,62,45,B8)A(EC,5F,45,AF)A(EC,5E,45,A5)A(EB,61,4E,A2)A(EA,62,52,A3)A(EB,61,51,A3)A(E7,5F,4E,A2)A(E7,5E,4E,A2)A(E7,41,1E,88);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'.
		do
			c_colors_0 (a_ptr, 0)
		end

feature {NONE} -- Image data filling.

	fill_memory
			-- Fill image data into memory.
		local
			l_pointer: POINTER
		do
			if attached {EV_PIXEL_BUFFER_IMP} implementation as l_imp then
				l_pointer := l_imp.data_ptr
				if not l_pointer.is_default_pointer then
					build_colors (l_pointer)
					l_imp.unlock
				end
			end
		end

end -- NEW_BUTTON_PIXEL_BUFFER
