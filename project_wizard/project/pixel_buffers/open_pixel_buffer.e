note
	description: "Pixel buffer that replaces original image file.%
		%The original version of this class has been generated by Image Eiffel Code."
	author: "Eiffel image embeder"
	date: "Sat, 07 Jan 2017 22:18:47 +0000"
	revision: "1.0"

class
	OPEN_PIXEL_BUFFER

inherit
	EV_PIXEL_BUFFER

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			make_with_size (16, 14)
			fill_memory
		end

feature {NONE} -- Image data

	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(14,00,00,00)A(2B,00,00,00)A(2A,00,00,00)A(1A,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(1F,00,00,00)A(00,00,00,00)A(00,00,00,00)A(2B,00,00,00)A(03,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(80,AF,93,1E)A(8F,B8,9B,22)A(8F,B8,99,22)A(8F,B8,99,20)A(95,B7,98,1F)A(21,AA,83,0F)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(04,00,00,00)A(55,00,00,00)A(1A,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(D2,CC,B4,37)A(FF,FF,E9,64)A(FF,FE,E4,5E)A(FF,FD,DF,59)A(FF,FB,D9,52)A(DF,D0,AC,2E)A(D6,CD,A8,2A)A(D6,CD,A4,26)A(D6,CD,A2,23)A(D8,BD,95,19)A(1A,9D,80,0A)A(11,1E,0F,00)A(11,96,78,0F)A(1E,99,77,09)A(28,99,79,06)A(33,9B,7D,0A)A(BF,C7,AC,30)A(FF,FE,E4,5E)A(FF,FD,DF,58)A(FF,FC,DA,52)A(FF,FC,D5,4D)A(FF,CF,AA,29)A(FF,D4,AF,2A)A(FF,D4,AE,2A)A(FF,D4,AD,29)A(FF,D3,AD,29)A(DC,C4,A5,26)A(BA,CA,AD,2F)A(B8,CE,B4,37)A(B5,D6,BE,3F)A(B5,DC,C5,46)A(B7,B2,95,1F)
				A(AC,C1,A3,28)A(FF,FD,DE,57)A(FF,FC,D9,52)A(FF,FC,D4,4C)A(FF,E8,C0,3A)A(FF,E1,B9,2C)A(FF,FA,D0,3B)A(FF,FB,D2,3E)A(FF,F9,D2,40)A(FF,FA,D2,42)A(EC,F0,CE,43)A(B3,FE,E3,55)A(AF,FE,E5,5A)A(AA,FE,E9,60)A(AA,F6,E1,5D)A(73,AB,8E,18)A(99,B7,99,20)A(FF,FC,D9,51)A(FF,FC,D4,4C)A(FF,FB,CF,46)A(FF,CF,A8,24)A(FF,F9,CC,33)A(FF,F9,CE,36)A(FF,FA,CF,3A)A(FF,F9,CF,3D)A(FF,FA,D1,3E)A(F9,F2,CD,3F)A(BF,F8,DC,4D)A(B2,FE,E4,57)A(AD,FE,E6,5D)A(B6,C7,AC,31)A(10,9F,80,00)A(80,AF,8F,18)A(FF,F8,D0,49)A(FF,FB,CE,46)A(FF,F5,C6,3D)A(FF,D3,AA,1F)A(FF,F8,CA,2E)A(FF,F9,CC,32)A(FF,F8,CC,35)A(FF,F9,CD,38)A(FF,F9,CE,3A)A(FF,F8,CD,3C)A(DD,F0,D0,43)A(B6,FC,E0,53)A(B1,FE,E4,58)A(95,B4,97,1D)A(00,00,00,00)A(4D,A6,84,11)A(FF,ED,C1,3C)A(FF,FA,C9,3F)A(FF,D5,A8,24)A(FF,F1,C1,24)A(FF,F7,C7,2A)A(FF,F8,C9,2E)A(FF,F8,CA,31)A(FF,F9,CB,34)A(FF,F9,CB,36)A(FF,F8,CC,38)A(EE,EF,CB,3D)A(B9,FC,DF,4F)A(BE,E1,C5,3F)A(41,A5,85,10)A(00,00,00,00)A(21,9B,7C,08)A(F2,DD,B2,2F)A(FF,F9,C4,39)A(FF,CE,A3,18)A(FF,F6,C3,21)A(FF,F7,C5,25)A(FF,F8,C7,29)A(FF,F8,C7,2D)A(FF,F8,C9,2F)A(FF,F9,C9,33)A(FF,FA,CA,35)A(FA,F1,C8,38)A(C4,F7,D8,48)A(B0,BC,9E,21)A(00,00,00,00)A(00,00,00,00)
				A(04,80,80,00)A(E0,CE,A3,23)A(FF,E3,AF,29)A(FF,E2,B1,16)A(FF,F5,C1,1D)A(FF,F6,C3,21)A(FF,F7,C5,25)A(FF,F7,C5,29)A(FF,F7,C6,2C)A(FF,F8,C7,2E)A(FF,F9,C7,30)A(FF,F8,C7,33)A(E1,EB,CA,3A)A(7B,AE,8F,15)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(CD,C7,9D,1D)A(FF,CE,9E,16)A(FF,F4,BC,13)A(FF,F5,BE,19)A(FF,F6,C0,1D)A(FF,F6,C1,21)A(FF,F6,C3,24)A(FF,F7,C4,28)A(FF,F8,C5,2B)A(FF,F2,C1,2B)A(FE,E5,B5,27)A(EB,BC,97,18)A(13,94,79,0D)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(BF,BF,94,17)A(FF,D3,A1,0D)A(FF,F5,BB,0F)A(FF,EE,B7,14)A(FF,E3,B0,15)A(FC,D7,A5,15)A(F0,CF,9D,12)A(D9,CA,99,12)A(BD,C4,92,0F)A(94,BC,8C,0C)A(3B,A9,86,0D)A(0B,A2,74,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(B4,B4,8B,0D)A(E2,C7,97,0E)A(C2,C5,95,0D)A(8F,C1,90,0E)A(3B,BA,8A,09)A(05,99,66,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00)A(00,00,00,00);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'.
		do
			c_colors_0 (a_ptr, 0)
		end

feature {NONE} -- Image data filling.

	fill_memory
			-- Fill image data into memory.
		local
			l_pointer: POINTER
		do
			if attached {EV_PIXEL_BUFFER_IMP} implementation as l_imp then
				l_pointer := l_imp.data_ptr
				if not l_pointer.is_default_pointer then
					build_colors (l_pointer)
					l_imp.unlock
				end
			end
		end

end -- OPEN_BUTTON_PIXEL_BUFFER
